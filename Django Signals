Question 1: By default, are Django signals executed synchronously or asynchronously? Please support your answer with a code snippet that conclusively proves your stance.

By default, Django signals are executed synchronously. This means that when a signal is sent, all connected receivers are called immediately and in the same thread before the execution proceeds.

Let's create a simple signal receiver that prints a message when a `User` instance is saved. We'll observe the order of execution to confirm that the signal is handled synchronously.
```
#signals.py
from django.db.models.signals import post_save
from django.contrib.auth.models import User
from django.dispatch import receiver

@receiver(post_save, sender=User)
def user_saved(sender, instance, created, **kwargs):
    print(f"Signal received: User '{instance.username}' has been {'created' if created else 'updated'}.")

#models.py
from django.db import models
from django.contrib.auth.models import AbstractUser

class CustomUser(AbstractUser):
    pass

#views.py
from django.shortcuts import render
from django.contrib.auth import get_user_model

User = get_user_model()

def create_user(request):
    print("Before saving user.")
    user = User.objects.create(username='john_doe')
    print("After saving user.")
    return render(request, 'success.html')
```

Expected Output When `create_user` View is Called:**
```
Before saving user.
Signal received: User 'john_doe' has been created.
After saving user.
```
As seen in the output, the signal message `"Signal received: User 'john_doe' has been created."` is printed **before** `"After saving user."`. This demonstrates that the signal receiver is executed synchronously, right after the `User` instance is saved and before the view continues its execution.



-----------------------------------------------------------------------------------------------------------------------------------------------------------



Question 2: Do Django signals run in the same thread as the caller? Please support your answer with a code snippet that conclusively proves your stance.

Yes, by default, Django signals run in the **same thread** as the caller. This synchronous behavior ensures that the signal receivers execute in the same execution flow without spawning new threads.
We'll modify the previous example to print the thread identifiers to verify that both the signal receiver and the caller are in the same thread.

```
#signals.py
import threading
from django.db.models.signals import post_save
from django.contrib.auth.models import User
from django.dispatch import receiver

@receiver(post_save, sender=User)
def user_saved(sender, instance, created, **kwargs):
    current_thread = threading.current_thread().name
    print(f"[Signal] Thread: {current_thread} - User '{instance.username}' has been {'created' if created else 'updated'}.")

#views.py
import threading
from django.shortcuts import render
from django.contrib.auth import get_user_model

User = get_user_model()

def create_user(request):
    current_thread = threading.current_thread().name
    print(f"[View] Thread: {current_thread} - Before saving user.")
    user = User.objects.create(username='jane_doe')
    print(f"[View] Thread: {current_thread} - After saving user.")
    return render(request, 'success.html')
```

-----------Expected Output When `create_user` View is Called:
```
[View] Thread: MainThread - Before saving user.
[Signal] Thread: MainThread - User 'jane_doe' has been created.
[View] Thread: MainThread - After saving user.
```
Both the view and the signal receiver print messages indicating they are running in the `MainThread`. This confirms that the signal receiver executes in the **same thread** as the caller.



-----------------------------------------------------------------------------------------------------------------------------------------------------------



Question 3: By default, do Django signals run in the same database transaction as the caller? Please support your answer with a code snippet that conclusively proves your stance.

Yes, by default, Django signals run within the **same database transaction** as the caller. This means that if the caller is performing operations within a transaction, the signal receivers are part of that transaction.

We'll use database transactions to demonstrate that the signal receiver is part of the same transaction as the view.

```
#signals.py
from django.db import transaction
from django.db.models.signals import post_save
from django.contrib.auth.models import User
from django.dispatch import receiver

@receiver(post_save, sender=User)
def user_saved(sender, instance, created, **kwargs):
    # Attempt to fetch a user within the transaction
    try:
        User.objects.get(username=instance.username)
        print(f"Signal: User '{instance.username}' exists in the transaction.")
    except User.DoesNotExist:
        print(f"Signal: User '{instance.username}' does not exist yet.")

#views.py
from django.db import transaction
from django.shortcuts import render
from django.contrib.auth import get_user_model

User = get_user_model()

def create_user_with_transaction(request):
    try:
        with transaction.atomic():
            print("View: Starting transaction.")
            user = User.objects.create(username='alice')
            # Intentionally raise an exception to trigger a rollback
            raise Exception("Simulating an error to rollback.")
    except Exception as e:
        print(f"View: Caught exception - {e}")
    return render(request, 'success.html')
```

-----------Expected Output When `create_user_with_transaction` View is Called:
```
View: Starting transaction.
Signal: User 'alice' exists in the transaction.
View: Caught exception - Simulating an error to rollback.
```

In the above example:
1. The view starts a transaction and creates a `User` instance.
2. The `post_save` signal is triggered, and the receiver confirms that the user exists within the transaction.
3. An exception is raised to rollback the transaction.
4. Despite the rollback, the signal was executed within the same transaction, demonstrating that signals are part of the caller's transaction.
